{"ast":null,"code":"//const API_BASE_URL = 'http://localhost:5000/api';\nconst API_BASE_URL = 'http://localhost:8000/api'; // For macOS\n\n// Fetch all products from the API\nexport const fetchProducts = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products`);\n    if (!response.ok) {\n      throw new Error(`HTTP error ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\n\n// Fetch a specific product by ID\nexport const fetchProduct = async productId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products/${productId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching product:', error);\n    throw error;\n  }\n};\n\n// Generate content based on product data and selected options\nexport const generateContent = async requestData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/generate-content`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating content:', error);\n    throw error;\n  }\n};\n\n// Complete a product by generating all missing fields\nexport const completeProduct = async requestData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/complete-product`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestData)\n    });\n    console.log('Request sent to completeProduct:', requestData);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error completing product:', error);\n    throw error;\n  }\n};\n\n// Generate a product image based on product data\nexport const generateProductImage = async requestData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/generate-image`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestData)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error generating image:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","fetchProducts","response","fetch","ok","Error","status","json","error","console","fetchProduct","productId","generateContent","requestData","method","headers","body","JSON","stringify","errorData","detail","completeProduct","log","generateProductImage"],"sources":["/Users/tonylin/Downloads/contentgen-takehome-master/frontend/src/services/api.js"],"sourcesContent":["//const API_BASE_URL = 'http://localhost:5000/api';\nconst API_BASE_URL = 'http://localhost:8000/api'; // For macOS\n\n// Fetch all products from the API\nexport const fetchProducts = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products`);\n    if (!response.ok) {\n      throw new Error(`HTTP error ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\n\n// Fetch a specific product by ID\nexport const fetchProduct = async (productId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/products/${productId}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching product:', error);\n    throw error;\n  }\n};\n\n// Generate content based on product data and selected options\nexport const generateContent = async (requestData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/generate-content`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestData),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error generating content:', error);\n    throw error;\n  }\n};\n\n// Complete a product by generating all missing fields\nexport const completeProduct = async (requestData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/complete-product`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestData)\n    });\n\n    console.log('Request sent to completeProduct:', requestData);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error completing product:', error);\n    throw error;\n  }\n};\n\n// Generate a product image based on product data\nexport const generateProductImage = async (requestData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/generate-image`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestData),\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || `HTTP error ${response.status}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error generating image:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}